// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisualReader.Persistence.Context;

#nullable disable

namespace VisualReader.Persistence.Migrations
{
    [DbContext(typeof(VisualReaderDbContext))]
    partial class VisualReaderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("VisualReader.Domain.Entities.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateUCT")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_utc");

                    b.Property<Guid>("IdTruyen")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateUCT")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_utc");

                    b.HasKey("Id");

                    b.HasIndex("IdTruyen");

                    b.HasIndex("IdUser");

                    b.ToTable("block", (string)null);
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Bookmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateUCT")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_utc");

                    b.Property<Guid>("IdChapter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PageInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pageinformation");

                    b.Property<DateTime>("UpdateUCT")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_utc");

                    b.HasKey("Id");

                    b.HasIndex("IdChapter");

                    b.HasIndex("IdUser");

                    b.ToTable("bookmark", (string)null);
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LoaiTruyenCuaTruyenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LuotXem")
                        .HasColumnType("int");

                    b.Property<float>("Ma")
                        .HasColumnType("real");

                    b.Property<DateTime>("NgayDang")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TruyenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LoaiTruyenCuaTruyenID");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("book_id");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("chapter_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_utc");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_utc");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.DsDaDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Chapter")
                        .HasColumnType("int")
                        .HasColumnName("chapter");

                    b.Property<DateTime>("CreateUCT")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_utc");

                    b.Property<Guid>("IdDsDangDoc")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTruyen")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateUCT")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_utc");

                    b.HasKey("Id");

                    b.HasIndex("IdDsDangDoc");

                    b.HasIndex("IdTruyen");

                    b.ToTable("dsdadoc", (string)null);
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.DsDangDoc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateUCT")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_utc");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Summary")
                        .HasColumnType("int")
                        .HasColumnName("summary");

                    b.Property<DateTime>("UpdateUCT")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_utc");

                    b.HasKey("Id");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("dsdangdoc", (string)null);
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.DsQuanTam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateUCT")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_utc");

                    b.Property<Guid>("IdTruyen")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LoaiQuanTam")
                        .HasColumnType("int")
                        .HasColumnName("loaiquantam");

                    b.Property<DateTime>("UpdateUCT")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_utc");

                    b.HasKey("Id");

                    b.HasIndex("IdTruyen");

                    b.HasIndex("IdUser");

                    b.ToTable("dsquantam", (string)null);
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.LoaiTruyenCuaTruyen", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LoaiTruyenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TruyenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("TruyenID");

                    b.ToTable("LoaiTruyenCuaTruyen");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.TacGiaTruyen", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TacGiaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TruyenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("TruyenID");

                    b.ToTable("TacGiaTruyen");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.TheLoaiTruyen", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TheLoaiID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TruyenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("TruyenID");

                    b.ToTable("TheLoaiTruyen");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Truyen", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeRatting")
                        .HasColumnType("int");

                    b.Property<byte[]>("AnhBia")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("LuotDanhGia")
                        .HasColumnType("int");

                    b.Property<int>("LuotXem")
                        .HasColumnType("int");

                    b.Property<string>("Ma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoLuongTheoDoi")
                        .HasColumnType("int");

                    b.Property<string>("TenTruyen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TinhTrang")
                        .HasColumnType("int");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<float>("XepHang")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("Truyen");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_utc");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit")
                        .HasColumnName("locked");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_utc");

                    b.Property<string>("UserTypeCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_type_code");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit")
                        .HasColumnName("verified");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.UserDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("avatar");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_details", (string)null);
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Block", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.Truyen", "Truyens")
                        .WithMany("Blocks")
                        .HasForeignKey("IdTruyen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualReader.Domain.Entities.User", "Users")
                        .WithMany("Blocks")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Truyens");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Bookmark", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.Chapter", "Chapters")
                        .WithMany("Bookmarks")
                        .HasForeignKey("IdChapter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualReader.Domain.Entities.User", "Users")
                        .WithMany("Bookmarks")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapters");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.LoaiTruyenCuaTruyen", null)
                        .WithMany("Chapters")
                        .HasForeignKey("LoaiTruyenCuaTruyenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Comment", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.Book", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("BookId");

                    b.HasOne("VisualReader.Domain.Entities.Chapter", "Chapter")
                        .WithMany("Comments")
                        .HasForeignKey("ChapterId");

                    b.HasOne("VisualReader.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("VisualReader.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("Chapter");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.DsDaDoc", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.DsDangDoc", "DsDangDocs")
                        .WithMany("DsDaDocs")
                        .HasForeignKey("IdDsDangDoc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualReader.Domain.Entities.Truyen", "Truyens")
                        .WithMany("DsDaDocs")
                        .HasForeignKey("IdTruyen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DsDangDocs");

                    b.Navigation("Truyens");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.DsDangDoc", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.User", "Users")
                        .WithOne("DsDangDocs")
                        .HasForeignKey("VisualReader.Domain.Entities.DsDangDoc", "IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.DsQuanTam", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.Truyen", "Truyens")
                        .WithMany("DsQuanTams")
                        .HasForeignKey("IdTruyen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualReader.Domain.Entities.User", "Users")
                        .WithMany("DsQuanTams")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Truyens");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.LoaiTruyenCuaTruyen", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.Truyen", null)
                        .WithMany("LoaiTruyenCuaTruyens")
                        .HasForeignKey("TruyenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.TacGiaTruyen", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.Truyen", null)
                        .WithMany("TacGiaTruyens")
                        .HasForeignKey("TruyenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.TheLoaiTruyen", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.Truyen", null)
                        .WithMany("TheLoaiTruyens")
                        .HasForeignKey("TruyenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.UserDetail", b =>
                {
                    b.HasOne("VisualReader.Domain.Entities.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("VisualReader.Domain.Entities.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Book", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.DsDangDoc", b =>
                {
                    b.Navigation("DsDaDocs");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.LoaiTruyenCuaTruyen", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.Truyen", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("DsDaDocs");

                    b.Navigation("DsQuanTams");

                    b.Navigation("LoaiTruyenCuaTruyens");

                    b.Navigation("TacGiaTruyens");

                    b.Navigation("TheLoaiTruyens");
                });

            modelBuilder.Entity("VisualReader.Domain.Entities.User", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("DsDangDocs")
                        .IsRequired();

                    b.Navigation("DsQuanTams");

                    b.Navigation("UserDetail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
